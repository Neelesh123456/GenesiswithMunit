<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <spring:beans>
        <spring:import resource="classpath:neelesh.xml" />
    </spring:beans>
    <munit:config mock-connectors="false" mock-inbounds="false" doc:name="MUnit configuration"/>
    
    <munit:test name="get:/CustomerExistence:neelesh-config-200-application/json-FlowTest" description="Verifying functionality of [get:/CustomerExistence:neelesh-config-200-application/json]" ignore="true">
        <mock:when doc:name="Mock" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['WebServiceConsumer']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('responseout/wsout.xml').asString()]" mimeType="application/xml"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Transform Message']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('scaffolder/response/get_200_customerexistence_application_json.json').asString()]"/>
        </mock:when>
        <set-variable variableName="SAPCustomerCode" value="#['0000000516']" doc:name="Variable"/>
        <set-variable variableName="SAPCompanyCode" value="#['1110']" doc:name="Variable"/>
        <flow-ref name="neeleshSub_Flow" doc:name="neeleshSub_Flow"/>

        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_customerexistence_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="neelesh-apikit-testTest" description="MUnit Test" >
        <set-payload value="&lt;soap-env:Envelope xmlns:soap-env=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;
   &lt;soap-env:Header/&gt;
   &lt;soap-env:Body&gt;
      &lt;n0:ZGen001CustExistResponse xmlns:n0=&quot;urn:sap-com:document:sap:soap:functions:mc-style&quot;&gt;
         &lt;ECustdet&gt;
            &lt;Name1&gt;Vision Solutions, Inc&lt;/Name1&gt;
            &lt;HouseNum1/&gt;
            &lt;StrSuppl1/&gt;
            &lt;Street/&gt;
            &lt;PostCode1&gt;92618&lt;/PostCode1&gt;
            &lt;City1&gt;15300 Barranca Parkway,Irvine&lt;/City1&gt;
            &lt;Country&gt;USA&lt;/Country&gt;
            &lt;Region&gt;CA&lt;/Region&gt;
            &lt;PoBox/&gt;
            &lt;TelNumber/&gt;
            &lt;FaxNumber/&gt;
            &lt;SmtpAddr/&gt;
         &lt;/ECustdet&gt;
         &lt;Message/&gt;
         &lt;Status&gt;TRUE&lt;/Status&gt;
      &lt;/n0:ZGen001CustExistResponse&gt;
   &lt;/soap-env:Body&gt;
&lt;/soap-env:Envelope&gt;
" doc:name="Set Payload" mimeType="application/xml"/>
        <dw:transform-message metadata:id="f7cb3f2b-5d30-4b90-b5f4-03a4d53867d2" doc:name="Transform Message">
            <dw:input-payload />
            <dw:set-payload resource="customerExistenceTransJson.dwl" ></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <munit:assert-on-equals expectedValue="#[getResource('scaffolder/response/get_200_customerexistence_application_json.json').asString()]" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>

</mule>
